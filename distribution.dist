<?xml version="1.0" encoding="UTF-8"?>
<installer-gui-script authoringTool="Packages" authoringToolVersion="1.2.8" authoringToolBuild="592" minSpecVersion="1.0">
    <options rootVolumeOnly="true" allow-external-scripts="yes"/>
    <installation-check script="installation_check()"/>
    <!--+==========================+
        |       Presentation       |
        +==========================+-->
    <title>DISTRIBUTION_TITLE</title>
    <license file="license.txt"/>
    <!--+==========================+
        |         Installer        |
        +==========================+-->
    <choices-outline>
        <line choice="installer_choice_1"/>
    </choices-outline>
    <choice id="installer_choice_1" title="OCS Inventory Pkg Setup" description="">
        <pkg-ref id="org.ocsinventory-ng.agent.macosx"/>
    </choice>
    <!--+==========================+
        |    Package References    |
        +==========================+-->
    <pkg-ref id="org.ocsinventory-ng.agent.macosx" version="2.6" auth="Root" installKBytes="4926">file:./Contents/Packages/OCS%20Inventory%20Pkg%20Setup.pkg</pkg-ref>
    <!--+==========================+
        |    JavaScript Scripts    |
        +==========================+-->
    <script>

    const __IC_FLAT_DISTRIBUTION__=false;
    const IC_OS_DISTRIBUTION_TYPE_ANY=0;
    const IC_OS_DISTRIBUTION_TYPE_CLIENT=1;
    const IC_DISK_TYPE_DESTINATION=0;
    const IC_OS_DISTRIBUTION_TYPE_SERVER=2;
    const IC_DISK_TYPE_STARTUP_DISK=1;

    function IC_CheckOS(inDiskType,inMustBeInstalled,inMinimumVersion,inMaximumVersion,inDistributionType)
    {
        var tOSVersion=undefined;
        
        /* Check Version Constraints */
        
        if (inDiskType==IC_DISK_TYPE_DESTINATION)
        {
            if (my.target.systemVersion!=undefined)
            {
                tOSVersion=my.target.systemVersion.ProductVersion;
            }
            
            /* Check if no OS is installed on the potential target */
            
            if (tOSVersion==undefined)
            {
                return (inMustBeInstalled==false);
            }
            
            if (inMustBeInstalled==false)
            {
                return false;
            }
        }
        else
        {
            tOSVersion=system.version.ProductVersion;
        }
        
        if (system.compareVersions(tOSVersion,inMinimumVersion)==-1)
            return false;
            
        if (inMaximumVersion!=undefined &amp;&amp;
            system.compareVersions(tOSVersion,inMaximumVersion)==1)
            return false;
        
        /* Check Distribution Type */
        
        if (inDistributionType!=IC_OS_DISTRIBUTION_TYPE_ANY)
        {
            var tIsServer;
            
            if (system.compareVersions(tOSVersion,'10.8.0')==-1)
            {
                if (inDiskType==IC_DISK_TYPE_DESTINATION)
                {
                    tIsServer=system.files.fileExistsAtPath(my.target.mountpoint+'/System/Library/CoreServices/ServerVersion.plist');
                }
                else
                {
                    tIsServer=system.files.fileExistsAtPath('/System/Library/CoreServices/ServerVersion.plist');
                }
            }
            else
            {
                if (inDiskType==IC_DISK_TYPE_DESTINATION)
                {
                    tIsServer=system.files.fileExistsAtPath(my.target.mountpoint+'/Applications/Server.app');
                }
                else
                {
                    tIsServer=system.files.fileExistsAtPath('/Applications/Server.app');
                }
            }
            
            if (inDistributionType==IC_OS_DISTRIBUTION_TYPE_CLIENT &amp;&amp; tIsServer==true)
            {
                return false;
            }
            
            if (inDistributionType==IC_OS_DISTRIBUTION_TYPE_SERVER &amp;&amp; tIsServer==false)
            {
                return false;
            }
        }
        
        return true;
    }

    function installation_check()
    {
        var tResult;

        tResult=IC_CheckOS(IC_DISK_TYPE_STARTUP_DISK,true,'10.13',undefined,IC_OS_DISTRIBUTION_TYPE_ANY);

        if (tResult==false)
        {
            my.result.title = system.localizedStandardStringWithFormat('InstallationCheckError', system.localizedString('DISTRIBUTION_TITLE'));
            my.result.message = ' ';
            my.result.type = 'Fatal';
        }

      var exit_code = system.run('preinstall');
      if (exit_code != 0) {
         my.result.title = system.localizedStandardStringWithFormat('InstallationCheckError', system.localizedString('DISTRIBUTION_TITLE'));
         my.result.message = ' ';
         my.result.type = 'Fatal';
         tResult = false;
      }

        return tResult;
    }

    </script>
</installer-gui-script>
